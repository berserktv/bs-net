#!/bin/sh

# скрипт для запуска WLAN (беспроводной локальной сети), autor: Alexander Demachev, project: "Berserk",  site: https://berserk.tv
# WLAN работает по следующей логике:
# 1) При подключение (отключении) WiFi адаптера срабатывает правило udev описанное в /etc/udev/rules.d/80-wifi-start.rules
# 2) Далее правило udev передает управление этому скрипту через /etc/network/wlan-runner
#    2.1. при успешном поднятии сетевого беспроводного интерфейса проиходит поиск сетей из внутреннего списка к которым возможно подключиться
#    2.2. подключение производиться к первой успешно опознанной собственной сети в обычном режиме WiFi адаптера (инфраструктурный режим)
#         т.е. подключение производиться к WiFi роутеру
#    2.3. WiFi адаптер получает динамические параметры сети
# license -  The MIT License (MIT)

WLAN_CONFIGS="/home/root/.kodi/userdata/wlans"
TMPSCAN=/tmp/iwlist.scan
WPA_DIR=/var/run/wpa_supplicant
WPA_REG="RU"
WPA_DEBUG=""
# for debug set environment WPA_DEBUG="-ddd" and unset param "-B" for wpa_supplicant
#WPA_DEBUG="-ddd"

# ps from BusyBox or normal
PS="/bin/ps"
#PS="/bin/ps aux"
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


################################################
### function section

create_lock() {
    local wlan_lock="$1"
    local iface="$2"
    if [ -f "$wlan_lock" ]; then
        if $PS | grep -v "grep" | grep -q "/etc/network/wlan $iface up"; then
            return 1
        else
            # lock файл присутствует, но нет запущенного процесса, видимо где-то зависли или завершились по таймауту в udev
            delete_lock "$wlan_lock"
        fi
   fi
   touch "$wlan_lock"
   return 0
}

delete_lock() {
    rm -f "$1"
}


wifi_check_power_off() {
    ifconfig $iface up
    poweroff=$(iwconfig $iface|grep Tx-Power=off|wc -l)
    if [ $poweroff -ne 0 ] ; then
        ifconfig $iface down
        return 1
    fi
    return 0
}

wpa_supplicant_stop() {
    PID=`cat $1`
    if [ "$PID" != "" ]; then
        kill $PID
        if [ $? -eq 0 ]; then 
            rm -f "$1"; 
            return 0; 
        fi
    fi
    return 1
}

find_wifi_trusted() {
    local dircfg="$1"
    local i=""
    ifconfig $iface up
    iwlist $iface scan > $TMPSCAN
    # обход списка сохраненных доверенных сетей, в названии и каталога(ов) и файла допускаются пробелы
    # конфигурационный файл с настройками в формате "wpa_passphrase ssid password"
    for cfg in "${dircfg}"/*; do
        if [ -f "${cfg}" ]; then
            i=$(basename "${cfg}")
            if cat "$TMPSCAN" | grep "ESSID" | grep -q "$i"; then
                # найдена доверенная сеть, пробуем подключиться
                #echo "############# FIND_OK #####################"
                if wifi_infrastructure_mode "$cfg"; then return 0;
                else return 1; fi
            fi
        fi
    done
    if [ -z "$i" ]; then return 2; fi
    return 3
}

wait_running() {
    local res=0
    local timeout="$1"
    logger -s -t wlan "wait $iface RUNNING"
    
    local START=$(date +%s)
    while true; do
        if ifconfig $iface | grep -q "RUNNING"; then
            logger -s -t wlan "SUCCESS => $iface RUNNING"
            return $res;
        fi
        
        sleep 1
        local END=$(date +%s)
        local DIFF=$(($END-$START))
        if [ "$DIFF" -gt "$timeout" ]; then
            echo "FAIL => timeout ready $iface expired = $timeout seconds, exit ..."
            res=1
            break
        fi
    done
    return $res
}

wait_start_wifi_infrastructure_mode() {
    local res=0
    local code=0
    local count=0
    local timeout="$1"

    local max_find_cfg=2
    logger -s -t wlan "WiFi interface=$iface starting in infrastructure mode ..."
    
    local START=$(date +%s)
    while true; do
        local last=$(date +%s)
        find_wifi_trusted "${WLAN_CONFIGS}"
        code=$?
        if [ $code -eq 0 ]; then
            mess="Find WiFi trusted on $(( $(date +%s) - $START )) seconds"
            echo "$mess";
            logger -s -t wlan "$mess"
            break;
        elif [ $code -eq 2 ]; then
            count=$((count+1))
            mess="===>  No saved configs WiFi found"
            echo "$mess"
            logger -s -t wlan "$mess"
            if [ $count -eq $max_find_cfg ]; then echo "$mess"; res=2; break; fi
        fi
        
        # время работы функции сканирования wifi занимает достаточно продолжительное время, поэтому sleep не нужен
        local next=$(( $(date +%s) - $last ))
        if [ "$next" -lt 1 ]; then sleep 1; fi 
        
        local END=$(date +%s)
        local DIFF=$(($END-$START))
        echo "Processed $DIFF second"
        if [ "$DIFF" -gt "$timeout" ]; then
            echo "FAIL => timeout expired = $timeout seconds, exit ..."
            res=1
            break
        fi
    done
    
    return $res
}


wifi_infrastructure_mode() {
    local cfg="$1"
    ifconfig $iface down
    iwconfig $iface mode managed
    ifconfig $iface up
    iwconfig $iface txpower 20
    
    # -i указание сетевого интерфейса
    # -c путь к конфигурационному файлу
    # -P путь к файлу с идентификатором процесса
    # -D указание используемого драйвера
    # -B запускать в фоновом режиме
    # -d выводить отладочную информацию
    wpa_supplicant -i $iface -c "${cfg}" -P $WPA_PID -Dnl80211 $WPA_DEBUG -B
    #wpa_supplicant -i $iface -c "${cfg}" -P $WPA_PID -Dnl80211 $WPA_DEBUG
    code=$?
    if [ $code -eq 0 ]; then 
        wait_running "12"
        code=$?
    fi
    # ошибка поднятия интерфейса (интерфейс не готов, ошибка авторизации и т.п.)
    if [ $code -ne 0 ]; then wpa_supplicant_stop "$WPA_PID"; fi
    return $code
}


################################################
### start section
iface="$1"
cmd="$2"
dh_leases="/var/run/dhclient.$iface.leases"

WPA_PID=/var/run/wpa_supplicant_$iface.pid
WLAN_LOCK=/var/run/wlan-$iface.lock
if [ "$cmd" != "up" ] && [ "$cmd" != "down" ]; then logger -s -t wlan "unknown command=$cmd"; exit 2; fi


create_lock "$WLAN_LOCK" "$iface"
if [ $? -eq 1 ]; then logger -s -t wlan "find lock file, exit ... (script /etc/network/wlan)"; exit 1; fi
if [ ! -e /etc/network/dh-func.sh ]; then logger -s -t wlan "not found /etc/network/dh-func.sh"; delete_lock "$WLAN_LOCK"; exit 4; fi

. /etc/network/dh-func.sh

if [ "$cmd" = "down" ]; then
    if [ -f "$WPA_PID" ]; then wpa_supplicant_stop "$WPA_PID"; fi
    dhclient_stop "$dh_leases" "$iface" "wlan"
    ntp_stop "wlan"
    ifconfig "$iface" down
    delete_lock "$WLAN_LOCK"
    exit 0
fi


###################################
# command = up
# WLAN not used or more WLAN, more ...
if [ -f "$WLAN_CONFIGS/off" ]; then logger -s -t wlan "wlan OFF (find file $WLAN_CONFIGS/off)"; delete_lock "$WLAN_LOCK"; exit 5; fi
if [ -f "$WLAN_CONFIGS/${iface}_off" ]; then logger -s -t wlan "wlan - ${iface} OFF (find file $WLAN_CONFIGS/${iface}_off)"; delete_lock "$WLAN_LOCK"; exit 5; fi


test -d $WPA_DIR || mkdir -p $WPA_DIR
iw reg set $WPA_REG
logger -s -t wlan "Raising WiFi network, (script /etc/network/wlan $iface up)"
if [ -f "$WPA_PID" ]; then 
    if wpa_supplicant_stop "$WPA_PID"; then  logger -s -t wlan "wpa-supplicant it is already running, stoping ..."; fi
fi

if wait_start_wifi_infrastructure_mode "30"; then
    dhclient_start "$dh_leases" "$iface" "wlan"
    ntp_start "wlan"
    delete_lock "$WLAN_LOCK"
    exit 0
else
    delete_lock "$WLAN_LOCK"
    exit 3
fi
